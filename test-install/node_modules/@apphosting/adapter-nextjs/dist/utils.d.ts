/// <reference types="node" resolution-mode="require"/>
import fsExtra from "fs-extra";
import { OutputBundleOptions, RoutesManifest } from "./interfaces.js";
import { NextConfigComplete } from "next/dist/server/config-shared.js";
export declare const move: typeof fsExtra.move, exists: typeof import("fs").exists.__promisify__ & typeof import("fs").exists, writeFile: typeof import("fs").writeFile.__promisify__ & typeof import("fs").writeFile, readJson: typeof import("jsonfile").readFile, readdir: typeof import("fs").readdir.__promisify__ & typeof import("fs").readdir;
export declare const DEFAULT_COMMAND = "npm";
export declare function loadConfig(root: string, projectRoot: string): Promise<NextConfigComplete>;
export declare function readRoutesManifest(distDir: string): Promise<RoutesManifest>;
export declare const isMain: (meta: ImportMeta) => boolean;
/**
 * Provides the paths in the output bundle for the built artifacts.
 * @param rootDir The root directory of the uploaded source code.
 * @param appDir The path to the application source code, relative to the root.
 * @return The output bundle paths.
 */
export declare function populateOutputBundleOptions(rootDir: string, appDir: string): OutputBundleOptions;
export declare function build(cwd: string, cmd?: string, ...argv: string[]): void;
/**
 * Moves the standalone directory, the static directory and copies over all of the apps resources
 * to the apphosting output directory.
 * Also generates the bundle.yaml file.
 * @param rootDir The root directory of the uploaded source code.
 * @param appDir The path to the application source code, relative to the root.
 * @param outputBundleOptions The target location of built artifacts in the output bundle.
 * @param nextBuildDirectory The location of the .next directory.
 */
export declare function generateOutputDirectory(rootDir: string, appDir: string, outputBundleOptions: OutputBundleOptions, nextBuildDirectory: string): Promise<void>;
export declare function validateOutputDirectory(outputBundleOptions: OutputBundleOptions): Promise<void>;
